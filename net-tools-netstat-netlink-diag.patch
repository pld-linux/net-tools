- from http://www.ducksong.com/misc/netstat-netlink-diag-patch.txt

Index: netstat.c
===================================================================
RCS file: /cvsroot/net-tools/net-tools/netstat.c,v
retrieving revision 1.55
diff -urNp -x '*.orig' net-tools-2.10.org/config.h net-tools-2.10/config.h
--- net-tools-2.10.org/config.h	2023-12-02 23:34:04.104218822 +0100
+++ net-tools-2.10/config.h	2023-12-02 23:34:04.168219581 +0100
@@ -73,3 +73,4 @@
 #define HAVE_IP_TOOLS 0
 #define HAVE_MII 1
 #define HAVE_SELINUX 1
+#define HAVE_NETLINK 1
diff -urNp -x '*.orig' net-tools-2.10.org/config.in net-tools-2.10/config.in
--- net-tools-2.10.org/config.in	2021-01-07 00:22:35.000000000 +0100
+++ net-tools-2.10/config.in	2023-12-02 23:34:04.168219581 +0100
@@ -98,3 +98,4 @@ bool 'Build mii-tool' HAVE_MII y
 bool 'Build plipconfig' HAVE_PLIP_TOOLS y
 bool 'Build slattach' HAVE_SERIAL_TOOLS y
 bool 'SELinux support' HAVE_SELINUX n
+bool 'Use Netlink Diag' HAVE_NETLINK y
diff -urNp -x '*.orig' net-tools-2.10.org/config.make net-tools-2.10/config.make
--- net-tools-2.10.org/config.make	2023-12-02 23:34:04.104218822 +0100
+++ net-tools-2.10/config.make	2023-12-02 23:34:04.168219581 +0100
@@ -36,3 +36,4 @@ HAVE_HWIRDA=1
 # HAVE_IP_TOOLS=0
 HAVE_MII=1
 HAVE_SELINUX=1
+HAVE_NETLINK=1
diff -urNp -x '*.orig' net-tools-2.10.org/netstat.c net-tools-2.10/netstat.c
--- net-tools-2.10.org/netstat.c	2021-01-07 00:22:35.000000000 +0100
+++ net-tools-2.10/netstat.c	2023-12-02 23:34:04.168219581 +0100
@@ -107,6 +107,13 @@
 #include <bluetooth/bluetooth.h>
 #endif
 
+#ifdef HAVE_NETLINK
+#include <asm/types.h>
+#include <linux/netlink.h>
+#include <linux/inet_diag.h>
+#endif
+
+
 #define PROGNAME_WIDTH 20
 #define SELINUX_WIDTH 50
 
@@ -1216,11 +1223,194 @@ static void tcp_do_one(int lnr, const ch
 	finish_this_one(uid,inode,timers);
 }
 
+
+
+#ifdef HAVE_NETLINK
+int tcp_netlink()
+{
+  /* a newer alternative to /proc/net/tcp[6] - using NETLINK DIAG
+     runs much faster with large number of entries
+     essentially just a bridge - converts from DIAG to /proc/net/tcp format
+     largely taken directly from ss of iproute package
+     
+     returns -1 if NETLINK isn't available, in which case the old /proc/net/tcp code is run
+  */
+
+  int fd;
+  struct sockaddr_nl nladdr;
+  struct {
+    struct nlmsghdr nlh;
+    struct inet_diag_req r;
+  } req;
+  struct msghdr msg;
+  char	buf[8192];
+  char linebuf[8192];
+  struct iovec iov;
+  int lnr = 0;
+  struct inet_diag_msg *r;
+  int rv = 0;
+  
+  if ((fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_INET_DIAG)) < 0)
+    return -1;
+  
+  memset(&nladdr, 0, sizeof(nladdr));
+  nladdr.nl_family = AF_NETLINK;
+  
+  req.nlh.nlmsg_len = sizeof(req);
+  req.nlh.nlmsg_type = TCPDIAG_GETSOCK;
+  req.nlh.nlmsg_flags = NLM_F_ROOT|NLM_F_MATCH|NLM_F_REQUEST;
+  req.nlh.nlmsg_pid = 0;
+  req.nlh.nlmsg_seq = 123456;
+  memset(&req.r, 0, sizeof(req.r));
+  req.r.idiag_family = AF_INET;
+  req.r.idiag_states = 0xfff;
+  req.r.idiag_ext = 0;
+
+  iov.iov_base = &req;
+  iov.iov_len = sizeof(req);
+  
+  msg = (struct msghdr) {
+    .msg_name = (void*)&nladdr,
+    .msg_namelen = sizeof(nladdr),
+    .msg_iov = &iov,
+    .msg_iovlen = 1,
+  };
+  
+  if (sendmsg(fd, &msg, 0) < 0)
+    {
+      rv = -1;
+      goto netlink_done;
+    }
+  
+  iov.iov_base = buf;
+  iov.iov_len = sizeof(buf);
+  
+  while (1) 
+    {
+      int status;
+      struct nlmsghdr *h;
+      
+      msg = (struct msghdr) {
+	(void*)&nladdr, sizeof(nladdr),
+	&iov,	1,
+	NULL,	0,
+	0
+      };
+      
+      status = recvmsg(fd, &msg, 0);
+      
+      if (status < 0) 
+	{
+	  if (errno == EINTR)
+	    continue;
+	  rv = -2;
+	  goto netlink_done;
+	}
+      
+      if (status == 0) 
+	{
+	  rv = 0;
+	  goto netlink_done;
+	}
+    
+
+      h = (struct nlmsghdr*)buf;
+      while (NLMSG_OK(h, status)) 
+	{
+	  if (h->nlmsg_seq == 123456)		  
+	    {
+	      if (h->nlmsg_type == NLMSG_DONE)
+		{
+		  rv = 0;
+		  goto netlink_done;
+		}
+	      
+	      if (h->nlmsg_type == NLMSG_ERROR) 
+		{
+		  rv = -2;
+		  goto netlink_done;
+		}
+	      
+	      r = NLMSG_DATA(h);
+	  
+	      if (r->idiag_family == AF_INET)
+		{
+		  snprintf (linebuf,8192,
+			    "%4d: %08X:%04X %08X:%04X %02X %08X:%08X %02X:%08X %08X %5d %8d %d",
+			    lnr, 
+			    r->id.idiag_src[0],
+			    ntohs(r->id.idiag_sport),
+			    r->id.idiag_dst[0],
+			    ntohs(r->id.idiag_dport),
+			    r->idiag_state,
+			    r->idiag_wqueue, r->idiag_rqueue,
+			    r->idiag_timer, 
+			    r->idiag_expires/10, // (diag reports as miliseconds, /proc interface stuck at centiseconds)
+			    r->idiag_retrans,
+			    r->idiag_uid,
+			    r->idiag_retrans,
+			    r->idiag_inode);
+		}
+	      else
+		{					  /* ipv6 */
+		  snprintf (linebuf,8192,
+			    "%4d: %08X%08X%08X%08X:%04X %08X%08X%08X%08X:%04X %02X %08X:%08X %02X:%08X %08X %5d %8d %d",
+			    lnr, 
+			    r->id.idiag_src[0],
+			    r->id.idiag_src[1],
+			    r->id.idiag_src[2],
+			    r->id.idiag_src[3],
+			    ntohs(r->id.idiag_sport),
+			    r->id.idiag_dst[0],
+			    r->id.idiag_dst[1],
+			    r->id.idiag_dst[2],
+			    r->id.idiag_dst[3],
+			    ntohs(r->id.idiag_dport),
+			    r->idiag_state,
+			    r->idiag_wqueue, r->idiag_rqueue,
+			    r->idiag_timer, 
+			    r->idiag_expires/10, // (diag reports as miliseconds, /proc interface stuck at centiseconds)
+			    r->idiag_retrans,
+			    r->idiag_uid,
+			    r->idiag_retrans,
+			    r->idiag_inode);
+		}
+	      
+	      tcp_do_one (++lnr, linebuf, r->idiag_family == AF_INET ? "tcp" : "tcp6");
+	    }
+	  h = NLMSG_NEXT(h, status);
+	}
+    }
+  
+  
+ netlink_done:
+  if (fd >= 0)
+    close (fd);
+  return rv;
+}
+#endif
+
+
 static int tcp_info(void)
 {
-    INFO_GUTS6(_PATH_PROCNET_TCP, _PATH_PROCNET_TCP6, "AF INET (tcp)",
-	       tcp_do_one, "tcp", "tcp6");
+  int rv = -1;
+  
+#ifdef HAVE_NETLINK
+  rv = tcp_netlink();
+#endif
+
+  if (rv == -1)
+    {
+      // netlink is not available - so parse /proc/net/tcp
+      INFO_GUTS6(_PATH_PROCNET_TCP, _PATH_PROCNET_TCP6, "AF INET (tcp)",
+		 tcp_do_one, "tcp", "tcp6");   
+    }
+  else if (rv == 0) 
+    return 0;
+  
+  return -1;
 }
+ 
 
 static int notnull(const struct sockaddr_storage *sas)
 {
